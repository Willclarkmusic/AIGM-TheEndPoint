Phase 2: Social & AI Agent Integration
Prompt 1: Advanced Messaging & Link Embedding
Prompt to give Claude Code:

You are an expert full-stack developer continuing to build a messaging platform. Your task is to upgrade the message composer and log to support rich text, file uploads, and link embedding.

Please read the following documents to understand the project's requirements:
- @/CLAUDE.md
- @/ARCHITECTURE.md
- @/UIUX.md

### Task: Upgrade the Messaging Experience

1.  **Rich Text Editor:** Replace the basic text message composer with a rich text editor. This editor should support bold, italics, underline, strikethrough, quotes, code blocks, bullet points, H1/H2/P sizing, text/highlight colors, and emojis.
2.  **File Uploads:**
    * Add a button to the composer to upload files.
    * Implement the logic to upload image files (up to 2MB) to Firebase Cloud Storage.
    * Upon successful upload, a new message should be created in Firestore that includes a link to the file.
3.  **Link Embedding:**
    * Implement logic to detect links in a message.
    * If the link is to YouTube or Vimeo, embed a video player in the message log.
    * For all other links, scrape the metadata (title, description, image) and display it as an embedded card.
    * Truncate the original URL to the first 50 characters in the message log.
4.  **Final Output:** Provide the complete and updated React components, along with the Firebase logic for file uploads. The code must be production-ready, fully commented, and styled according to the UI/UX document.

Expected Outcome:
The message composer will now be a rich text editor. Users can upload images directly to the chat. Links will be automatically embedded as cards or video players, creating a more dynamic chat experience.

How to Test:

In a chat room, use the rich text editor to send a message with bold text, bullet points, and a code block. Verify it is formatted correctly.

Upload an image file from your computer. Verify that the file appears in the chat and is saved in Firebase Cloud Storage.

Paste a link from YouTube and a link from a regular website into the chat. Verify that the YouTube link embeds as a video player and the other link embeds as a card with a preview.

Prompt 2: AI Agent Backend Service
Prompt to give Claude Code:

You are an expert full-stack developer building the core AI backend for a messaging platform. Your task is to create a secure, scalable, and self-contained Google Cloud Run service that orchestrates AI agents.

Please read the following documents to understand the project's requirements:
- @/CLAUDE.md
- @/ARCHITECTURE.md
- @/UIUX.md

### Task: Build the AI Agent Backend Service

1.  **Docker & Python Environment:** Create a `Dockerfile` and `requirements.txt` to set up a Python environment with LangGraph and other necessary dependencies.
2.  **API Key Management:** Assume the Stability AI API key is stored in Google Cloud Secret Manager. Write the code to securely retrieve this key at runtime.
3.  **LangGraph Integration:** Implement the core LangGraph logic for a single, generic AI agent. This agent should be able to receive a user's prompt and a list of personality prompts.
4.  **Backend API:**
    * Create a simple API endpoint (e.g., `/agent-response`) that accepts a JSON payload containing the user's message, the agent's ID, and the chat context.
    * This endpoint will use the LangGraph agent to generate a response based on the agent's personality and the chat history.
    * It will then call the Stability AI API if the prompt is for an image, video or music and return a `200 OK` response with a processing status.
5.  **Final Output:** Provide the complete and well-commented code for the entire Cloud Run service, including the Dockerfile, the Python application, and instructions for local testing and deployment.

Expected Outcome:
A complete Python backend service in a single folder, ready to be deployed to Google Cloud Run. This service will be the brain of our AI agents, capable of receiving requests and generating intelligent responses, as well as initiating generative tasks.

How to Test:

Set up the local environment and run the service.

Use a tool like cURL or Postman to send a test JSON payload to the /agent-response endpoint.

Verify that the service correctly processes the request and returns a valid response.

Prompt 3: AI Agent UI & Interaction
Prompt to give Claude Code:

You are an expert full-stack developer continuing to build a messaging platform. Your task is to create the front-end for managing AI agents and their interactions in chat rooms.

Please read the following documents to understand the project's requirements:
- @/CLAUDE.md
- @/ARCHITECTURE.md
- @/UIUX.md

### Task: Build the AI Agent UI & Interaction

1.  **Right Sidebar UI:** Create the right-hand sidebar UI, which should be foldable. This sidebar will list the user's created AI agents and have a button to search and add agents from other users.
2.  **Agent Creation Modal:** Implement a modal for creating a new AI agent. This modal should have a form for the agent's name and a rich text input for a list of personality prompts.
3.  **@Mention Logic:**
    * In the `MessageComposer`, implement logic to detect when a user types `@` followed by the name of an AI agent in the chat room.
    * When an agent is mentioned, a Firebase Cloud Function should be triggered.
    * This Cloud Function's role is to call the API endpoint of our Cloud Run service, passing the message and the agent's context.
4.  **Final Output:** Provide the complete and updated React components, along with the Firebase Cloud Function code. The code must be production-ready, fully commented, and styled according to the UI/UX document.

Expected Outcome:
The app will now have a right-hand sidebar for managing AI agents. Users can create agents and, when an agent is mentioned in a chat, a response will be generated by the Cloud Run service and displayed in the chat log.

How to Test:

In a server you own, open the AI agent sidebar and create a new agent with a name and a personality prompt. Verify it appears in your list.

In a chat room, type @ followed by the agent's name. Verify that the agent generates a response and sends it to the chat.

Open the Firebase Console. A new document should appear in the ai_agents collection with the agent's details.

Prompt 4: Social Feed & AI Posts
Prompt to give Claude Code:

You are an expert full-stack developer continuing to build a messaging platform. Your task is to build the "Social Feed" feature, including the infinite scroll and AI-generated posts.

Please read the following documents to understand the project's requirements:
- @/CLAUDE.md
- @/ARCHITECTURE.md
- @/UIUX.md

### Task: Build the Social Feed & AI Posts

1.  **Social Feed UI:** In the `InfoBar`, create the "Social Feed" tab. The `ActionWindow` should display the feed, which should be an infinitely scrollable list of posts. The UI should match the neo-brutalism design.
2.  **Infinite Scroll Logic:**
    * Implement the infinite scroll feature using a Firestore query with a `limit` and `startAfter` cursor to fetch posts in chunks.
    * The frontend should load the next chunk of posts when the user scrolls near the end of the feed.
3.  **AI-Generated Posts:**
    * Implement a function that triggers a generative image request to our Cloud Run service.
    * Upon completion, a new post with the image and an AI-generated caption should be created in the `social_feed` Firestore collection.
4.  **Post Creation Modal:** Create a simple modal for users to manually create posts, including text and an image.
5.  **Final Output:** Provide the complete and updated React components, along with any necessary Cloud Functions to trigger the AI-generated posts. The code must be production-ready, fully commented, and styled according to the UI/UX document.

Expected Outcome:
The "Social Feed" tab will display an endless scroll of posts. The feed will be populated with both user-created content and AI-generated content.

How to Test:

Navigate to the "Social Feed" tab. A list of posts should appear.

Scroll to the bottom of the feed. New posts should automatically load.

Use the post creation modal to create a new post with text and an image. Verify it appears in the feed.

Manually trigger the AI post generation function (via a button or test script). A new post with an image and caption should appear.